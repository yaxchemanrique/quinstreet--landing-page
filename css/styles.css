/* BACKGROUND COLOR TRANSITION ------------------------------ */
/* 
.background-transition:
Class is responsible for managing the dynamic transition of background colors using the ::before pseudo-element.
  * The ::before pseudo-element sits on top of the background, achieving an animated effect as it transitions between colors.
  * The element is positioned relatively to accommodate and align the pseudo-elements precisely with it.
  * It utilizes internal CSS variables --_bg-color-a and --_bg-color-b to determine the colors involved in the transition.
  * --_bg-color-a is used as the initial visible background color.
  * --_bg-color-b defines the color to transition to during animation.
  * isolation: isolate; ensures proper stacking of nested elements with pseudo-elements for rendering.

This creates a smooth color transition effect.
*/
.background-transition {
  --_bg-color-a: var(--clr-neutral-200);
  --_bg-color-b: var(--clr-tertiary-100);

  position: relative;
  background-color: var(--_bg-color-a);
  isolation: isolate;
}

/* 
.background-transition::before:
Pseudo-element implementing the animation and visual layering for .background-transition.
  * Positioned absolutely using `inset: 0` to cover the entire container accurately.
  * Z-index of -1 ensures it remains behind any content inside the .background-transition.
  * Initially set with background-color --_bg-color-b and fades out to reveal .background-transition's background.
  * The opacity transition creates a continuous alternate effect.
*/
.background-transition::before {
  content: '';
  position: absolute;
  z-index: -1;
  background-color: var(--_bg-color-b);
  animation: opacity-fade-out 10s infinite alternate ease-in-out;
}

/* `inset: 0` fallback for older browsers */
.background-transition::before {
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
}

@supports (inset: 0) {
  .background-transition::before {
    inset: 0;
  }
}

@keyframes opacity-fade-out {
  0% {
    opacity: 1;
  }

  100% {
    opacity: 0;
  }
}

/* 
.background-pattern:
Manages and displays a repeating background pattern.
  * Update the fill color in the SVG file located at /assets/images/bg-pattern.svg to modify the pattern's color.
  * The pattern repeats every 60vw for optimal visual design and consistency with the prototype on mobile.
  * For screens wider than 767px, background size adjusts to 35vw for improved design alignment.
*/

.background-pattern {
  background-image: url('../assets/images/bg-pattern.svg');
  background-size: 60vw;
  padding-bottom: 2.625rem;
}

/* Ensures that the body's background color and patterns
span the full height of the viewport, even when the content
is insufficient to fill the screen. This prevents visual
cut-offs of the background on larger displays, maintaining
consistent background appearance. */
.background-pattern,
.background-transition {
  min-height: 100vh;
}

@media (min-width: 767px) {
  .background-pattern {
    background-size: 35vw;
    padding-bottom: 5.75rem;
  }
}

/* NAV ------------------------------ */
nav {
  background-color: var(--clr-neutral-900);
  padding-block: 22px 21px;
  display: flex;
  justify-content: center;
  margin-bottom: 2rem;
}

/* MAIN ------------------------------ */

main {
  padding: 1rem;
  padding-top: 0;
}

/* USER DETAILS FORM ------------------------------ */

#user-details-form {
  max-width: 670px;
  margin-inline: auto;
  background-color: var(--clr-neutral-100);
  box-shadow: 0 7px 14px 0 var(--clr-box-shadow-form);
  margin-bottom: 2.25rem;
}

#form-header {
  background-color: var(--clr-neutral-900);
  color: var(--clr-neutral-100);
  font-size: 1.125rem;
  font-weight: var(--fw-bold);
  text-align: center;
  display: flex;
  justify-content: center;
  padding-inline: 2.625rem;
  padding-block: 1rem;
}

#form-header span {
  display: block;
  max-width: 30ch;
}

#user-details-form input {
  font-size: inherit;
  color: var(--clr-neutral-800);
  padding-block: 1rem;
  padding-inline: 1.5rem;
  border: solid var(--clr-neutral-300) 1px;
  box-shadow: inset 0 1px 2px 0 var(--clr-box-shadow-input);
  border-radius: 4px;
}

/* 
.button:
Defines the base styling for a button element with adaptable design using CSS variables.
  * background-color: Utilizes the internal CSS variable --_button-background to allow dynamic background color assignment. 
    * If --_button-background is not set, it defaults to --clr-neutral-900.

  * color: Uses the CSS variable --_button-text to dynamically assign text color within buttons.
    * If --_button-text is not set, it defaults to --clr-neutral-100.
  
  * hover & focus states: Adjusts the button's background color on interaction using --_btn-bg--hover.
    * This variable provides a hover and focus state color if defined, otherwise defaults to --clr-neutral-800 for visual feedback upon user interaction.
*/
.button {
  background-color: var(--_button-background, var(--clr-neutral-900));
  color: var(--_button-text, var(--clr-neutral-100));
  border: none;
  border-radius: 100vw;
  font-size: inherit;
  text-transform: uppercase;
  padding-block: 1rem;
  line-height: 1.5;
  letter-spacing: 0.85px;
  width: 100%;
  max-width: 334px;
  margin-inline: auto;
  transition: background-color 250ms ease-in-out;
}

.button:is(:hover, :focus) {
  background-color: var(--_button-hover-background, var(--clr-neutral-800));
}

.button-primary {
  --_button-background: var(--clr-primary-400);
  --_button-text: var(--clr-neutral-100);
  --_button-hover-background: var(--clr-primary-500);
}

#user-details-form .inputs-container {
  display: flex;
  flex-direction: column;
  gap: 1.25rem;
  margin-block: 1rem 1.375rem;
  margin-inline: auto;
  padding-inline: 1.375rem;
  padding-block-end: 1.375rem;
}

.input-row {
  display: flex;
  gap: 0.75rem;
}

.input-row #city,
.input-row #state {
  min-width: 0;
}

.input-row #city {
  flex: 2;
}

.input-row #state {
  flex: 1;
}

@media (min-width: 767px) {
  #user-details-form .inputs-container {
    padding-inline: 3.375rem;
    margin-block-start: 1.75rem;
  }

  .input-row {
    gap: 1.625rem;
  }
}

/* 
input:invalid:not(:placeholder-shown)

  This selector targets input fields that:
  * Are currently invalid (`:invalid`): An input field is considered invalid if it fails to meet the specified constraints, such as pattern, required, min, max, etc.
  * Do not display their placeholder content (`:not(:placeholder-shown)`): This pseudo-class ensures that styles are applied only when the user has entered data into the input field.
*/
input:invalid:not(:placeholder-shown) {
  border: solid 1px var(--clr-error-400);
  outline: solid 1px var(--clr-error-400);
}

#submit-button:disabled {
  background-color: var(--clr-neutral-800);
  cursor: not-allowed;
}

/* ASIDE ------------------------------ */

aside {
  display: flex;
  justify-content: center;
}

/* 
article:
  This style block defines the visual appearance of an article element, including a decorative border effect.

  Custom Properties:
  * --_title-width: A custom property dynamically set via JavaScript to accommodate dynamic title lengths within the article.
    It adjusts the border styling in response to changes in the title's width.
  * --_border-clr: Sets the border color using the CSS variable --clr-secondary-400.
  * --_border-width: Defines the thickness of the borders with a value of 2px.
  * --_title-margin-inline: Provides an additional 2-rem margin on each side of the title's transparent space in the top border, ensuring visual separation from the article borders.

  Design Properties:
  * position: relative, allowing accurate placement of the title relative to its borders.

  Background and Borders:
  * Background properties (position, size, repeat, image) simulate the complex border effect surrounding the article.
  * Background position and size use --_border-width to determine precise placement and dimensions of border layers.
  * Four linear gradient backgrounds are utilized to mimic the left, top, right, and bottom borders of the article:
    * The top border is structured to incorporate both --_title-width and --_title-margin-inline, creating a gap between the border and the title to enhance readability and styling without overlap.
    * The left, right, and bottom borders seamlessly integrate alongside the top border.
*/
.article {
  /* --_title-width variable recovered using JavaScript */
  --_title-margin-inline: 0.875rem;
  --_border-clr: var(--clr-secondary-400);
  --_border-width: 2px;

  font-size: 0.875rem;
  max-width: 290px;
  position: relative;

  background-position: 0 0, 0 0, 100% 0, 0 100%;
  background-size: var(--_border-width) 100%, 100% var(--_border-width), var(--_border-width) 100%, 100% var(--_border-width);
  background-repeat: no-repeat;
  background-image: linear-gradient(0deg, transparent 0, var(--_border-clr) 0, var(--_border-clr) 100%, transparent 100%),
    /* left border*/
    linear-gradient(90deg, var(--_border-clr) 0%, var(--_border-clr) calc(50% - var(--_title-width) / 2 - var(--_title-margin-inline)), transparent calc(50% - var(--_title-width) / 2 - var(--_title-margin-inline)), transparent calc(50% + var(--_title-width) / 2 + var(--_title-margin-inline)), var(--_border-clr) calc(50% + var(--_title-width) / 2 + var(--_title-margin-inline))),
    /* top border*/
    linear-gradient(180deg, transparent 0, var(--_border-clr) 0, var(--_border-clr) 100%, transparent 100%),
    /* right border*/
    linear-gradient(270deg, transparent 0, var(--_border-clr) 0, var(--_border-clr) 100%, transparent 100%)
    /* bottom border*/
  ;
}

.article h2 {
  text-align: center;
  font-size: 1rem;
  font-weight: var(--fw-bold);
  text-transform: uppercase;
  position: absolute;
  transform: translateY(-50%);
  width: 100%;
}

.article-header {
  margin-bottom: 0.75rem;
}

.article-header p {
  font-size: 0.75rem;
  font-weight: var(--fw-bold);
  text-transform: uppercase;
  color: var(--clr-secondary-400);
}

.article-header h3 {
  font-size: 1.25rem;
  font-weight: var(--fw-regular);
  line-height: 1.2;
}

.article-content {
  background-color: var(--clr-neutral-100-75);
  margin: 0.875rem;
  margin-top: 1rem;
  padding: 0.875rem;
  text-wrap: pretty;
}

.article-content a {
  color: var(--clr-tertiary-400);
  text-decoration: none;
  font-weight: var(--fw-bold);
  text-transform: uppercase;
}

.article-content a:hover {
  text-decoration: underline;
}

@media (min-width: 767px) {
  .article {
    --_title-margin-inline: 2rem;
    max-width: 404px;
  }

  .article-content {
    padding-bottom: 2.625rem;
  }
}
